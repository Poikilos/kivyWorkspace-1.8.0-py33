import math

class PPAnimationFrame:
    travel = None
    seconds = None
    index = None
    
    def __init__(self):
        self.travel = (0.0,0.0)
        #seconds = .0166 #60fps
        self.seconds = .0333 #30fps default
        self.index = 0 #index in a frame array
    
class PPAnimation:
    frames = None
    
    def __init__(self):
        self.frames = list()

class PPSpriteAbstract:
    tau = math.pi * 2.0
    eighthOfTau = math.pi / 4.0
    ANIM_Angle0 = 0
    ANIM_Angle45 = 10
    ANIM_Angle90 = 20
    ANIM_Angle135 = 30
    ANIM_Angle180 = 40
    ANIM_Angle225 = 50
    ANIM_Angle270 = 60
    ANIM_Angle315 = 70

    ANIM_StyleArmed = 0
    ANIM_StyleUnarmed = 100
    
    ANIM_ActionStand = 0
    ANIM_ActionWalk = 1
    ANIM_ActionRun = 2
    ANIM_ActionStrike = 3
    ANIM_ActionDeath = 4
    
    def getAnimIndex_Deg(self, angleDegrees, actionConstant, styleConstant):
        angleIndex = self.getAngleIndex(angleDegrees)
        return styleConstant + angleIndex + actionConstant

    def getAnimIndex_Rad(self, angleRadians, actionConstant, styleConstant):
        angleIndex = self.getAngleIndex(angleRadians)
        return styleConstant + angleIndex + actionConstant
    
    def getAngleIndex_Deg(self, angleDegrees):
        while angleDegrees < 0:
            angleDegrees += 360
        #while angleDegrees >= 360:
        #    angleDegrees -= 360
        angleIndex = int((angleDegrees / 45.0) + .5) #+.5 for rounding
        while angleIndex > 7:
            angleIndex -= 8

    def getAngleIndex_Rad(self, angleRadians):
        while angleRadians < 0:
            angleRadians += PPSprite.tau
        #while angleRadians >= PPSprite.tau:
        #    angleRadians -= PPSprite.tau
        angleIndex = int((angleRadians / PPSprite.eighthOfTau) + .5) #+.5 for rounding
        while angleIndex > 7:
            angleIndex -= 8
    
class PPUnscaledSprite:
    worldPos = None
    screenPos = None
    sourceOriginalRect = None
    sourceCroppedRect = None
    destRenderRect = None
    #list of PPAnimations:
    animations = None
    ANIM = None
    images = None
    
    def __init__(self):
        self.animations = list()
        self.images = list()
        self.ANIM = PPSpriteAbstract.ANIM_StandEast
        self.worldPos = (0.0,0.0)
        self.screenPos = (0.0,0.0)
    
    #uses screenPos to calculate (cropped) destRenderRect and sourceCroppedRect
    def crop(self, screenRect):
        selfX = int(self.screenPos[0])
        selfY = int(self.screenPos[1])
        self.sourceCroppedRect.left = 0
        self.sourceCroppedRect.top = 0
        self.sourceCroppedRect.width = self.sourceOriginalRect.width
        self.sourceCroppedRect.height = self.sourceOriginalRect.height
        self.destRenderRect.left = selfX
        self.destRenderRect.top = selfY
        self.destRenderRect.width = self.sourceOriginalRect.width
        self.destRenderRect.height = self.sourceOriginalRect.height
        pastLeftCount = screenRect.left - selfX #itemRect.left
        if pastLeftCount > 0:
            self.sourceCroppedRect.left += pastLeftCount
            self.sourceCroppedRect.width -= pastLeftCount
            self.destRenderRect.left += pastLeftCount
            self.destRenderRect.height -= pastLeftCount
        pastRightCount = (self.destRenderRect.left+self.sourceOriginalRect.width) - (screenRect.left+screenRect.width)
        if (pastRightCount>0):
            self.sourceCroppedRect.width -= pastRightCount
        #if (self.sourceCroppedRect.width<0):
        #    self.sourceCroppedRect.width = 0
        #if (self.destRenderRect.width<0):
        #    self.destRenderRect.width = 0
        #NOTE: for speed, let renderer deal with skipping negative size sprites
            
        pastTopCount = screenRect.top - itemRect.top
        if pastTopCount > 0:
            itemRect.top += pastTopCount
            itemRect.height -= pastTopCount
        pastBottomCount = (self.sourceOriginalRect.top+self.sourceOriginalRect.height) - (screenRect.top+screenRect.height)
        if (pastBottomCount>0):
            itemRect.height -= pastBottomCount        
        if (itemRect.width<0):
            itemRect.width = 0
            
        return itemRect
        
        

class KPRect:
    top = None
    left = None
    width = None
    height = None
    
    def __init__(self, top, left, width, height):
        self.top = top
        self.left = left
        self.width = width
        self.height = height
    
        
        
    def clamp(self, screenRect):
        #clamp self TO the given screenRect and return that copy of self (like pygame.screenRect clamp)
        itemRect = KPRect(self.top, self.left, self.width. self.height)

        pastLeftCount = screenRect.left - itemRect.left
        if pastLeftCount > 0:
            itemRect.left += pastLeftCount
            itemRect.width -= pastLeftCount
        pastRightCount = (itemRect.left+itemRect.width) - (screenRect.left+screenRect.width)
        if (pastRightCount>0):
            itemRect.width -= pastRightCount
        if (itemRect.width<0):
            itemRect.width = 0
            
        pastTopCount = screenRect.top - itemRect.top
        if pastTopCount > 0:
            itemRect.top += pastTopCount
            itemRect.height -= pastTopCount
        pastBottomCount = (itemRect.top+itemRect.height) - (screenRect.top+screenRect.height)
        if (pastBottomCount>0):
            itemRect.height -= pastBottomCount        
        if (itemRect.width<0):
            itemRect.width = 0
            
        return itemRect

class ByteColor:
    byteDepth = None
    channels = None
    bOffset = None
    gOffset = None
    rOffset = None
    aOffset = None
    
    def __init__(self):
        self.bOffset = 0
        self.gOffset = 1
        self.rOffset = 2
        self.aOffset = 3
        self.byteDepth = 4
        self.channels = bytearray([0,0,0,255])
    
    def getA(self):
        returnByte = None
        if (self.aOffset is not None):
            returnByte = self.channels[self.aOffset]
        return returnByte

    def getR(self):
        returnByte = None
        if (self.rOffset is not None):
            returnByte = self.channels[self.rOffset]
        return returnByte

    def getG(self):
        returnByte = None
        if (self.gOffset is not None):
            returnByte = self.channels[self.gOffset]
        return returnByte
    
    def getB(self):
        returnByte = None
        if (self.bOffset is not None):
            returnByte = self.channels[self.bOffset]
        return returnByte

class VariableImage:
    #static variables
    defaultByteDepth = 4
    
    #member variables
    stride = None
    width = None
    height = None
    byteDepth = None
    buffer = None
    byteCount = None
    bOffset = None
    gOffset = None
    rOffset = None
    aOffset = None
    lastUsedFileName = None
    
    def __init__(self, setWidth, setHeight, setBytesPerPixel):
        self.width = int(setWidth)
        self.height = int(setHeight)
        self.byteDepth = int(setBytesPerPixel)
        self.stride = self.width * self.byteDepth
        self.byteCount = self.stride * self.height
        self.buffer = bytearray(self.byteCount)
        self.bOffset = 0
        self.gOffset = 1
        self.rOffset = 2
        if (setBytesPerPixel>3):
            self.aOffset = 3
        else:
            self.aOffset = None
        
    def set_at_from_float_color(self, atX, atY, brushColor):
        self.static_set_at_from_float_color_ToCustomByteOrder(self.buffer, self.stride, self.byteDepth, atX, atY, brushColor, self.bOffset, self.gOffset, self.rOffset, self.aOffset)

    def static_set_at_from_float_color_ToCustomByteOrder(self, destArray, destStride, destByteDepth, atX, atY, brushColor, bOffset, gOffset, rOffset, aOffset):
        xCenter = int(atX)
        yCenter = int(atY)
        pixelByteIndex = destStride*yCenter + xCenter*destByteDepth
        #print ("pixelByteIndex:"+str(pixelByteIndex))
        #print ("len(pixelBuffer):"+str(len(destArray)))
        #print("writing bytes...")
        destArray[pixelByteIndex + bOffset] = int(brushColor.b*255.0+.5)
        destArray[pixelByteIndex + gOffset] = int(brushColor.g*255.0+.5)
        destArray[pixelByteIndex + rOffset] = int(brushColor.r*255.0+.5)
        if (aOffset is not None) and (aOffset<self.byteDepth):
            destArray[pixelByteIndex + aOffset] = int(brushColor.a*255.0+.5)

        
    #def DrawFromWithAlpha(self, sourceVariableImage, atX, atY):
        
    def getMaxChannelValueNotIncludingAlpha(self):
        destByteIndex = 0
        destLineByteIndex = destByteIndex
        #Since in kivy's pygame.image.fromstring(data, (self.fbo.size[0], self.fbo.size[1]), 'RGBA', True)
        # saves with odd (errant??) byte order,
        # channel offsets are:
        #bOffset = 2 #bOffset = 0 #blue comes from green channel
        #gOffset = 0 #gOffset = 1 #green comes from blue channel
        #rOffset = 1 #rOffset = 2 
        #aOffset = 3 #aOffset = 3
        returnMax = 0
        for thisY in range(0,self.height):
            destByteIndex = destLineByteIndex
            for thisX in range(0,self.width):
                #if self.buffer[destByteIndex+self.bOffset]>returnMax:
                #    returnMax = self.buffer[destByteIndex+self.bOffset]
                #if self.buffer[destByteIndex+self.gOffset]>returnMax:
                #    returnMax = self.buffer[destByteIndex+self.gOffset]
                #if self.buffer[destByteIndex+self.rOffset]>returnMax:
                #    returnMax = self.buffer[destByteIndex+self.rOffset]
                #destByteIndex += self.byteDepth
                for channelIndex in range(0,self.byteDepth):
                    if self.buffer[destByteIndex]>returnMax:
                        returnMax = self.buffer[destByteIndex]
                    destByteIndex += 1
            destLineByteIndex += self.stride
        return returnMax

    def getMaxAlphaValue(self):
        destByteIndex = 0
        destLineByteIndex = destByteIndex
        #Since in kivy's pygame.image.fromstring(data, (self.fbo.size[0], self.fbo.size[1]), 'RGBA', True)
        # saves with odd (errant??) byte order,
        # channel offsets are:
        #bOffset = 2 #bOffset = 0 #blue comes from green channel
        #gOffset = 0 #gOffset = 1 #green comes from blue channel
        #rOffset = 1 #rOffset = 2 
        #aOffset = 3 #aOffset = 3
        returnMax = None
        if (self.aOffset is not None):
            returnMax = 0
            for thisY in range(0,self.height):
                destByteIndex = destLineByteIndex
                for thisX in range(0,self.width):
                    if self.buffer[destByteIndex+self.aOffset]>returnMax:
                        returnMax = self.buffer[destByteIndex+self.aOffset]
                    destByteIndex += self.byteDepth
                destLineByteIndex += self.stride
        return returnMax
    
    def FillAllDestructivelyUsingByteColor(self, brushByteColor):
        self.FillAllDestructivelyUsingColorBytes(brushByteColor.getR(),brushByteColor.getG(),brushByteColor.getB(),brushByteColor.getA())
        
    def FillAllDestructivelyUsingColorBytes(self, setRByte, setGByte, setBByte, setAByte):
        destByteIndex = 0
        destLineByteIndex = destByteIndex
        setBytes = bytes([setBByte, setGByte, setRByte, setAByte])
        #Since in kivy's pygame.image.fromstring(data, (self.fbo.size[0], self.fbo.size[1]), 'RGBA', True)
        # saves with odd (errant??) byte order,
        # channel offsets are:
        #bOffset = 2 #bOffset = 0 #blue comes from green channel
        #gOffset = 0 #gOffset = 1 #green comes from blue channel
        #rOffset = 1 #rOffset = 2 
        #aOffset = 3 #aOffset = 3
        for thisY in range(0,self.height):
            destByteIndex = destLineByteIndex
            for thisX in range(0,self.width):
                self.buffer[destByteIndex+self.bOffset] = setBytes[0]
                self.buffer[destByteIndex+self.gOffset] = setBytes[1]
                self.buffer[destByteIndex+self.rOffset] = setBytes[2]
                self.buffer[destByteIndex+self.aOffset] = setBytes[3]
                destByteIndex += self.byteDepth
            destLineByteIndex += self.stride

    #def static_set_at_BGRA(self, destArray, destStride, destByteDepth, atX, atY, brushColor):
        #Since in kivy's pygame.image.fromstring(data, (self.fbo.size[0], self.fbo.size[1]), 'RGBA', True)
        # blue channel saves to green,
        # green channel saves to red, &
        # red channel saves to blue,
        # channel offsets are:
        #bOffset = 0
        #gOffset = 1
        #rOffset = 2
        #aOffset = 3
    #    self.static_set_at_ToCustomByteOrder(destArray, destStride, destByteDepth, atX, atY, brushColor, self.bOffset, self.gOffset, self.rOffset, self.aOffset)

#     def static_set_at_ToGRBA(self, destArray, destStride, destByteDepth, atX, atY, brushColor):
# 
#         #Since in kivy's pygame.image.fromstring(data, (self.fbo.size[0], self.fbo.size[1]), 'RGBA', True)
#         # blue channel saves to green,
#         # green channel saves to red, &
#         # red channel saves to blue,
#         # channel offsets are:
#         gOffset = 0 #gOffset = 1
#         rOffset = 1 #rOffset = 2
#         bOffset = 2 #bOffset = 0
#         aOffset = 3 #aOffset = 3
#         self.static_set_at_ToCustomByteOrder(destArray, destStride, destByteDepth, atX, atY, brushColor, bOffset, gOffset, rOffset, aOffset)        

    def static_PixelFill_ToCustomByteOrder(self, destArray, arrayDestStartByteIndex, arrayDestEndExByteIndex, sourceArray, arraySourceStartByteIndex, arraySourceEndExByteIndex, bOffset, gOffset, rOffset, aOffset):
        sourceByteDepth = 4
        destByteDepth = 4
        if (sourceByteDepth == destByteDepth):
            if (sourceByteDepth == 4):
                sourceIndex = arraySourceStartByteIndex
                destIndex = arrayDestStartByteIndex
                destRegionByteCount = arrayDestEndExByteIndex - arrayDestStartByteIndex
                sourceRegionByteCount = arraySourceEndExByteIndex - arraySourceStartByteIndex
                destRegionPixelCount = int(destRegionByteCount/destByteDepth)
                sourceRegionPixelCount = int(sourceRegionByteCount/sourceByteDepth)
                minPixelCount = destRegionPixelCount
                if (sourceRegionPixelCount<minPixelCount):
                    minPixelCount = sourceRegionPixelCount
                #if (destRegionPixelCount<=sourceRegionPixelCount):
                for relativeIndex in range(0,minPixelCount):
                    destArray[destIndex + bOffset] = sourceArray[sourceIndex]
                    destArray[destIndex + gOffset] = sourceArray[sourceIndex+1]
                    destArray[destIndex + rOffset] = sourceArray[sourceIndex+2]
                    destArray[destIndex + aOffset] = sourceArray[sourceIndex+3]
                    destIndex += destByteDepth
                    sourceIndex += sourceByteDepth
                #else:
                #    print("Not Yet Implemented: tried to copy small region ("+str(sourceRegionPixelCount)+" pixels) to large region length ("+str(destRegionPixelCount)+" pixels) in PixelFill_ToGRBA")
            else:
                print("Not Yet Implemented: byte depth "+str(sourceByteDepth)+" in static_PixelFill_ToCustomByteOrder")
        else:
            print("Not Yet Implemented: different byte depth in static_PixelFill_ToCustomByteOrder")
        
    
#     def static_PixelFill_ToGRBA(self, destArray, arrayDestStartByteIndex, arrayDestEndExByteIndex, sourceArray, arraySourceStartByteIndex, arraySourceEndExByteIndex):
#         #Since in kivy's pygame.image.fromstring(data, (self.fbo.size[0], self.fbo.size[1]), 'RGBA', True)
#         # blue channel saves to green,
#         # green channel saves to red, &
#         # red channel saves to blue,
#         # channel offsets are:
#         gOffset = 0 #gOffset = 1
#         rOffset = 1 #rOffset = 2
#         bOffset = 2 #bOffset = 0
#         aOffset = 3 #aOffset = 3
#         self.static_PixelFill_ToCustomByteOrder(destArray, arrayDestStartByteIndex, arrayDestEndExByteIndex, sourceArray, arraySourceStartByteIndex, arraySourceEndExByteIndex, bOffset, gOffset, rOffset, aOffset)
    
#     def DrawToSelf_AtTopLeft_FillRestWithTransparent_ToGRBA(self, inputVariableImage):
#         self.static_DrawToArray_AtTopLeft_FillRestWithTransparent_ToGRBA(inputVariableImage.buffer, inputVariableImage.stride, inputVariableImage.byteDepth, inputVariableImage.width, inputVariableImage.height)
        
    def static_DrawToArray_AtTopLeft_FillRestWithTransparent_ToCustomByteOrder(self, inputArray, inputStride, inputByteDepth, inputWidth, inputHeight, bOffset, gOffset, rOffset, aOffset):
        #this is much like LineCopy version, except instead of using python array slicing it uses static_PixelFill_ToCustomByteOrder
        inputStride = int(inputStride)
        inputWidth = int(inputWidth)
        inputHeight = int(inputHeight)
        inputByteDepth = int(inputByteDepth)
        IsToFillRestWithZeroes = True
        if self.byteDepth == inputByteDepth:
            destLineOfZeroes = None
            if (inputHeight<self.height):
                destLineOfZeroes = bytearray(self.stride)
            if (inputWidth==self.width):
                destLinePixelIndex = 0
                sourceLinePixelIndex = 0
                for destY in range(0,self.height):
                    NextDestLinePixelIndex = destLinePixelIndex + self.stride
                    NextSourceLinePixelIndex = sourceLinePixelIndex + inputStride
                    if (destY<inputHeight):
                        #NOTE: width difference is already handled in outer "if" statement, for speed.
                        #self.buffer[destLinePixelIndex:NextDestLinePixelIndex] = inputArray[sourceLinePixelIndex:NextSourceLinePixelIndex]
                        self.static_PixelFill_ToCustomByteOrder(self.buffer, destLinePixelIndex, NextDestLinePixelIndex, inputArray, sourceLinePixelIndex, NextSourceLinePixelIndex, bOffset, gOffset, rOffset, aOffset)
                    elif IsToFillRestWithZeroes:
                        self.buffer[destLinePixelIndex:NextDestLinePixelIndex] = destLineOfZeroes[:]
                        #static_PixelFill_ToCustomByteOrder(self.buffer, destLinePixelIndex, NextDestLinePixelIndex, destLineOfZeroes, 0, self.stride, bOffset, gOffset, rOffset, aOffset)
                    else:
                        break
                    destLinePixelIndex += self.stride
                    sourceLinePixelIndex += inputStride
            elif (inputWidth>self.width):
                destLinePixelIndex = 0
                sourceLinePixelIndex = 0
                for destY in range(0,self.height):
                    NextDestLinePixelIndex = destLinePixelIndex + self.stride
                    #NextSourceLinePixelIndex = sourceLinePixelIndex + inputStride
                    NextSourceLinePixelIndexLIMITED = sourceLinePixelIndex + self.stride #intentionally self.stride, to limit how much to get
                    if (destY<inputHeight):
                        #NOTE: width difference is already handled in outer "if" statement, for speed.
                        #self.buffer[destLinePixelIndex:NextDestLinePixelIndex] = inputArray[sourceLinePixelIndex:NextSourceLinePixelIndexLIMITED]
                        self.static_PixelFill_ToCustomByteOrder(self.buffer, destLinePixelIndex, NextDestLinePixelIndex, inputArray, sourceLinePixelIndex, NextSourceLinePixelIndexLIMITED, bOffset, gOffset, rOffset, aOffset)
                    elif IsToFillRestWithZeroes:
                        self.buffer[destLinePixelIndex:NextDestLinePixelIndex] = destLineOfZeroes[:]
                    else:
                        break
                    destLinePixelIndex += self.stride
                    sourceLinePixelIndex += inputStride
            else: #elif (inputWidth<self.width):
                destLinePixelIndex = 0
                sourceLinePixelIndex = 0
                PartialDestLineOfZeroes = bytearray(self.stride-inputStride)
                for destY in range(0,self.height):
                    NextDestLinePixelIndex = destLinePixelIndex + self.stride
                    NextDestLinePixelIndexLIMITED = destLinePixelIndex + inputStride #intentially input stride to limit self stride since source is smaller
                    NextSourceLinePixelIndex = sourceLinePixelIndex + inputStride
                    #NextSourceLinePixelIndexLIMITED = sourceLinePixelIndex + self.stride #intentionally self.stride, to limit how much to get
                    if (destY<inputHeight):
                        #NOTE: width difference is already handled in outer "if" statement, for speed.
                        #self.buffer[destLinePixelIndex:NextDestLinePixelIndexLIMITED] = inputArray[sourceLinePixelIndex:NextSourceLinePixelIndex]
                        self.static_PixelFill_ToCustomByteOrder(self.buffer, destLinePixelIndex, NextDestLinePixelIndexLIMITED, inputArray, sourceLinePixelIndex, NextSourceLinePixelIndex, bOffset, gOffset, rOffset, aOffset)
                        if IsToFillRestWithZeroes:
                            self.buffer[NextDestLinePixelIndexLIMITED:NextDestLinePixelIndex] = PartialDestLineOfZeroes[:]
                    elif IsToFillRestWithZeroes:
                        self.buffer[destLinePixelIndex:NextDestLinePixelIndex] = destLineOfZeroes[:]
                    else:
                        break
                    destLinePixelIndex += self.stride
                    sourceLinePixelIndex += inputStride
        else:
            print("Not Yet Implemented: different byte depth in static_DrawToArray_AtTopLeft_FillRestWithTransparent_ToCustomByteOrder")
    
#     def static_DrawToArray_AtTopLeft_FillRestWithTransparent_ToGRBA(self, inputArray, inputStride, inputByteDepth, inputWidth, inputHeight):
#         #Since in kivy's pygame.image.fromstring(data, (self.fbo.size[0], self.fbo.size[1]), 'RGBA', True)
#         # blue channel saves to green,
#         # green channel saves to red, &
#         # red channel saves to blue,
#         # channel offsets are:
#         gOffset = 0 #gOffset = 1
#         rOffset = 1 #rOffset = 2
#         bOffset = 2 #bOffset = 0
#         aOffset = 3 #aOffset = 3
#         self.static_DrawToArray_AtTopLeft_FillRestWithTransparent_ToCustomByteOrder(inputArray, inputStride, inputByteDepth, inputWidth, inputHeight, bOffset, gOffset, rOffset, aOffset)

                    
    def DrawToSelf_AtTopLeft_LineCopy_FillRestWithTransparent(self, inputVariableImage):
        self.static_DrawToArray_AtTopLeft_LineCopy_FillRestWithTransparent(inputVariableImage.buffer, inputVariableImage.stride, inputVariableImage.byteDepth, inputVariableImage.width, inputVariableImage.height)
        
    def static_DrawToArray_AtTopLeft_LineCopy_FillRestWithTransparent(self, inputArray, inputStride, inputByteDepth, inputWidth, inputHeight):
        IsToFillRestWithZeroes = True
        if self.byteDepth == inputByteDepth:
            destLineOfZeroes = None
            if (inputHeight<self.height):
                destLineOfZeroes = bytearray(self.stride)
            if (inputWidth==self.width):
                destLinePixelIndex = 0
                sourceLinePixelIndex = 0
                for destY in range(0,self.height):
                    NextDestLinePixelIndex = destLinePixelIndex + self.stride
                    NextSourceLinePixelIndex = sourceLinePixelIndex + inputStride
                    if (destY<inputHeight):
                        #NOTE: width difference is already handled in outer "if" statement, for speed.
                        self.buffer[destLinePixelIndex:NextDestLinePixelIndex] = inputArray[sourceLinePixelIndex:NextSourceLinePixelIndex]
                    elif IsToFillRestWithZeroes:
                        self.buffer[destLinePixelIndex:NextDestLinePixelIndex] = destLineOfZeroes[:]
                    else:
                        break
                    destLinePixelIndex += self.stride
                    sourceLinePixelIndex += inputStride
            elif (inputWidth>self.width):
                destLinePixelIndex = 0
                sourceLinePixelIndex = 0
                for destY in range(0,self.height):
                    NextDestLinePixelIndex = destLinePixelIndex + self.stride
                    #NextSourceLinePixelIndex = sourceLinePixelIndex + inputStride
                    NextSourceLinePixelIndexLIMITED = sourceLinePixelIndex + self.stride #intentionally self.stride, to limit how much to get
                    if (destY<inputHeight):
                        #NOTE: width difference is already handled in outer "if" statement, for speed.
                        self.buffer[destLinePixelIndex:NextDestLinePixelIndex] = inputArray[sourceLinePixelIndex:NextSourceLinePixelIndexLIMITED]
                    elif IsToFillRestWithZeroes:
                        self.buffer[destLinePixelIndex:NextDestLinePixelIndex] = destLineOfZeroes[:]
                    else:
                        break
                    destLinePixelIndex += self.stride
                    sourceLinePixelIndex += inputStride
            else: #elif (inputWidth<self.width):
                destLinePixelIndex = 0
                sourceLinePixelIndex = 0
                PartialDestLineOfZeroes = bytearray(self.stride-inputStride)
                for destY in range(0,self.height):
                    NextDestLinePixelIndex = destLinePixelIndex + self.stride
                    NextDestLinePixelIndexLIMITED = destLinePixelIndex + inputStride #intentially input stride to limit self stride since source is smaller
                    NextSourceLinePixelIndex = sourceLinePixelIndex + inputStride
                    #NextSourceLinePixelIndexLIMITED = sourceLinePixelIndex + self.stride #intentionally self.stride, to limit how much to get
                    if (destY<inputHeight):
                        #NOTE: width difference is already handled in outer "if" statement, for speed.
                        self.buffer[destLinePixelIndex:NextDestLinePixelIndexLIMITED] = inputArray[sourceLinePixelIndex:NextSourceLinePixelIndex]
                        if IsToFillRestWithZeroes:
                            self.buffer[NextDestLinePixelIndexLIMITED:NextDestLinePixelIndex] = PartialDestLineOfZeroes[:]
                    elif IsToFillRestWithZeroes:
                        self.buffer[destLinePixelIndex:NextDestLinePixelIndex] = destLineOfZeroes[:]
                    else:
                        break
                    destLinePixelIndex += self.stride
                    sourceLinePixelIndex += inputStride
        else:
            print("Not Yet Implemented: different byte depth in DrawToSelfAtTopLeft")