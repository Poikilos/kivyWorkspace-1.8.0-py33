#expertmm forked this from https://gist.github.com/tshirtman/6222891

from kivy.app import App
from kivy.properties import NumericProperty
from kivy.lang import Builder
from kivy.clock import Clock

from kivy.uix.label import Label
from kivy.graphics import PushMatrix
from kivy.graphics import PopMatrix
from kivy.graphics import Rotate
from kivy.graphics import Rectangle
from kivy.graphics import Color
from kivy.uix.widget import Widget

import math

#the variables marked with underscores should not be touched except internally
class FreeWidget(Widget):
    freeAngle = None
    freePos = None
    _rotation_instruction = None
    _rectangle_instruction = None
    
    deltaAngle = None
    deltaPos = None
    
    def __init__(self, **kwargs):
        super(FreeWidget, self).__init__(**kwargs)
        self.freeAngle = 0.0
        self.deltaAngle = 0.0
        self.freePos = (10.0,100.0)
        self._rotation_instruction = Rotate(angle=self.freeAngle, origin=self.freePos)
        self._rectangle_instruction = Rectangle(pos=self.freePos, size=(10.0,20.0))
#         with self.canvas.before:
#             PushMatrix()
#             Rotate(angle=self.freeAngle, origin = self.freePos)
        self.canvas.add(PushMatrix())
        self.canvas.add(self._rotation_instruction)  #self.canvas.add(Rotate(angle=self.freeAngle, origin = self.freePos))
        self.canvas.add(Color(1,0,0,1))
        self.canvas.add(self._rectangle_instruction)  #self.canvas.add(Rectangle(pos=self.freePos, size=(10.0,20.0)))
        self.canvas.add(PopMatrix())
        self.refresh()
#         with self.canvas.after:
#             PopMatrix()
    
    def refresh(self):
        if (self.deltaPos is not None):
            self.freePos = self.freePos[0] + self.deltaPos[0], self.freePos[1] + self.deltaPos[1]
        self._rectangle_instruction.pos = self.freePos[0]-self._rectangle_instruction.size[0]/2.0, self.freePos[1]-self._rectangle_instruction.size[1]/2.0
        self._rotation_instruction.origin = self.freePos
        self.freeAngle += self.deltaAngle
        self._rotation_instruction.angle = self.freeAngle

class TextVerticalApp(App):
    angle = NumericProperty(0)
    imperativeLabel = None

    def build(self):
        Clock.schedule_interval(self.update, 0)
        mainForm = BoxLayout()
        
        self.freeWidget1 = FreeWidget()
        self.freeWidget1.deltaAngle = (1.0)
        mainForm.add_widget(self.freeWidget1)
        
        self.freeWidget2 = FreeWidget()
        self.freeWidget2.deltaAngle = (3.0)
        self.freeWidget2.deltaPos = 2,1
        mainForm.add_widget(self.freeWidget2)
        
        self.imperativeLabel = Label(text="...but the rectangles do whatever they want...and the plot thickens...")
        self.imperativeLabel.set_center_y(mainForm.size[1]/3.0*2.0)
        self.imperativeLabel.size = self.imperativeLabel.texture_size
        mainForm.add_widget(self.imperativeLabel)
        
        return mainForm

    def update(self, dt, *args):
        self.angle += dt * 100
        self.freeWidget2.freePos=(self.freeWidget2.freePos[0],self.freeWidget2.freePos[1])
        self.freeWidget1.refresh()
        self.freeWidget2.refresh()

if __name__ == '__main__':
    TextVerticalApp().run()