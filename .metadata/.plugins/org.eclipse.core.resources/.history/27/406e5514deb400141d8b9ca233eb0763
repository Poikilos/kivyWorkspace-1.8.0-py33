

class PixelBuffer:
    stride = None
    width = None
    height = None
    byteDepth = None
    buffer = None
    
    def __init__(self, setWidth, setHeight, setBytesPerPixel):
        self.width = setWidth
        self.height = setHeight
        self.byteDepth = setBytesPerPixel
        self.stride = self.width * self.byteDepth
        TOTALBYTECOUNT = self.stride * self.height
        self.buffer = bytearray(TOTALBYTECOUNT)
        
    def DrawToSelf(self, inputPixelBuffer, atX, atY):
        if self.byteDepth == inputPixelBuffer.byteDepth:
            myZeroes = None
            if (inputPixelBuffer.height<this.height):
                myZeroes = bytearray(this.stride)
            if (inputPixelBuffer.width>this.width):
                destLinePixelIndex = 0
                sourceLinePixelIndex = 0
                for destY in range(0,this.height):
                    destNextLinePixelIndex = destLinePixelIndex + self.stride
                    if (destY<inputPixelBuffer.height):
                        this.buffer[destLinePixelIndex:destNextLinePixelIndex] = inputPixelBuffer.buffer[:sourceLinePixelIndex]
                    else:
                        this.buffer[destLinePixelIndex:destNextLinePixelIndex] = myZeroes[:]
                    destLinePixelIndex += this.stride
                    sourceLinePixelIndex += inputPixelBuffer.stride
                        
                        
        else:
            print("Not Yet Implemented: different byte depth in DrawToSelfAtTopLeft")